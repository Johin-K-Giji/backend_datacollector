generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  username       String   @unique
  phone          String   @unique
  email          String   @unique
  password       String
  verifiedStatus Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  documents      Document[]
  accessGiven    Access[] @relation("user_access_given")
  accessReceived Access[] @relation("user_access_received")
  folders        Folder[] // Add relation field for User to Folder
}

model Folder {
  id         Int      @id @default(autoincrement())
  name       String
  userId     String   // Change userId type to String to match User.id type
  parentId   Int?     // Foreign key to the parent folder, optional
  parent     Folder?  @relation("Subfolder", fields: [parentId], references: [id]) // Parent folder
  subfolders Folder[] @relation("Subfolder") // Child folders
  documents  Document[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
}

model Access {
  id             Int      @id @default(autoincrement())
  userId         String   // Change userId type to String to match User.id type
  documentId     Int
  sharedWithId   String   // Change sharedWithId type to String to match User.id type
  user           User     @relation("user_access_given", fields: [userId], references: [id])
  sharedWith     User     @relation("user_access_received", fields: [sharedWithId], references: [id])
  document       Document @relation(fields: [documentId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String
  path       String
  folderId   Int
  folder     Folder   @relation(fields: [folderId], references: [id])
  userId     String   // Change userId type to String to match User.id type
  user       User     @relation(fields: [userId], references: [id])
  access     Access[] // Add reverse relation for Access from Document
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
